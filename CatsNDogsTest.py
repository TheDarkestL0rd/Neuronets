import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import os
from CatsNDogs_Classificator import CatsDogsCNN
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

class CatDogClassifierApp:
    """
    –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫
    """
    def __init__(self, root):
        self.root = root
        self.root.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.model = None
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.current_image = None
        self.class_names = ['–ö–æ—Ç', '–°–æ–±–∞–∫–∞']
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406],
                               std=[0.229, 0.224, 0.225])
        ])
        
        self.setup_ui()
        self.load_model()
    
    def setup_ui(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root, 
            text="üê± –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫ üê∂",
            font=("Arial", 20, "bold"),
            bg='#f0f0f0',
            fg='#333333'
        )
        title_label.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(self.root, bg='#f0f0f0')
        button_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.load_button = tk.Button(
            button_frame,
            text="üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            command=self.load_image,
            font=("Arial", 12),
            bg='#4CAF50',
            fg='white',
            padx=20,
            pady=10,
            cursor='hand2'
        )
        self.load_button.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.classify_button = tk.Button(
            button_frame,
            text="üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
            command=self.classify_image,
            font=("Arial", 12),
            bg='#2196F3',
            fg='white',
            padx=20,
            pady=10,
            cursor='hand2',
            state='disabled'
        )
        self.classify_button.pack(side=tk.LEFT, padx=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = tk.Frame(self.root, bg='white', relief='sunken', bd=2)
        self.image_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_label = tk.Label(
            self.image_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            font=("Arial", 14),
            bg='white',
            fg='#666666'
        )
        self.image_label.pack(expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_frame = tk.Frame(self.root, bg='#f0f0f0')
        self.result_frame.pack(pady=20, padx=20, fill='x')
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = tk.Label(
            self.result_frame,
            text="",
            font=("Arial", 16, "bold"),
            bg='#f0f0f0'
        )
        self.result_label.pack()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        self.prob_frame = tk.Frame(self.result_frame, bg='#f0f0f0')
        self.prob_frame.pack(pady=10, fill='x')
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(
            self.root,
            text=f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ | –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}",
            font=("Arial", 10),
            bg='#e0e0e0',
            fg='#333333',
            relief='sunken'
        )
        self.status_label.pack(side=tk.BOTTOM, fill='x')
    
    def load_model(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        """
        try:
            self.model = CatsDogsCNN(num_classes=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
            if os.path.exists("cats_dogs_model.pt"):
                self.model.load_state_dict(torch.load("cats_dogs_model.pt", map_location=self.device))
                self.model.to(self.device)
                self.model.eval()
                self.status_label.config(text=f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ | –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
            else:
                self.status_label.config(text="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–Ω–∞—á–∞–ª–∞.")
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–§–∞–π–ª –º–æ–¥–µ–ª–∏ 'cats_dogs_model.pt' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç."
                )
        except Exception as e:
            self.status_label.config(text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
    
    def load_image(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        """
        file_types = [
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.gif *.tiff"),
            ("JPEG", "*.jpg *.jpeg"),
            ("PNG", "*.png"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=file_types
        )
        
        if file_path:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(file_path).convert('RGB')
                self.current_image = image
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.display_image(image)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.classify_button.config(state='normal')
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.clear_results()
                
                self.status_label.config(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(file_path)}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
                self.status_label.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def display_image(self, image):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        """
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_size = (300, 300)
        image_resized = image.copy()
        image_resized.thumbnail(display_size, Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è tkinter
        from PIL import ImageTk
        photo = ImageTk.PhotoImage(image_resized)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_label.config(image=photo, text="")
        self.image_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    
    def classify_image(self):
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if self.current_image is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return
        
        if self.model is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return
        
        try:
            self.status_label.config(text="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            self.root.update()
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_tensor = self.transform(self.current_image).unsqueeze(0).to(self.device)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            with torch.no_grad():
                outputs = self.model(image_tensor)
                probabilities = F.softmax(outputs, dim=1)[0]
                predicted_class = outputs.argmax(dim=1).item()
                confidence = probabilities[predicted_class].item()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.display_results(predicted_class, probabilities)
            
            self.status_label.config(
                text=f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.class_names[predicted_class]} ({confidence:.2%})"
            )
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    def display_results(self, predicted_class, probabilities):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        confidence = probabilities[predicted_class].item()
        result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {self.class_names[predicted_class]}"
        confidence_text = f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}"
        
        # –¶–≤–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if confidence > 0.8:
            color = '#4CAF50'  # –ó–µ–ª–µ–Ω—ã–π
        elif confidence > 0.6:
            color = '#FF9800'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            color = '#F44336'  # –ö—Ä–∞—Å–Ω—ã–π
        
        self.result_label.config(
            text=f"{result_text}\n{confidence_text}",
            fg=color
        )
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        for widget in self.prob_frame.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        for i, (class_name, prob) in enumerate(zip(self.class_names, probabilities)):
            # –†–∞–º–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
            class_frame = tk.Frame(self.prob_frame, bg='#f0f0f0')
            class_frame.pack(fill='x', pady=5)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            class_label = tk.Label(
                class_frame,
                text=f"{class_name}:",
                font=("Arial", 12),
                bg='#f0f0f0',
                width=10,
                anchor='w'
            )
            class_label.pack(side='left')
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress = ttk.Progressbar(
                class_frame,
                length=200,
                value=prob.item() * 100,
                mode='determinate'
            )
            progress.pack(side='left', padx=10)
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç
            percent_label = tk.Label(
                class_frame,
                text=f"{prob.item():.1%}",
                font=("Arial", 10),
                bg='#f0f0f0'
            )
            percent_label.pack(side='left', padx=5)
    
    def clear_results(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        self.result_label.config(text="")
        for widget in self.prob_frame.winfo_children():
            widget.destroy()

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        root.iconbitmap('icon.ico')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = CatDogClassifierApp(root)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    root.mainloop()

if __name__ == "__main__":
    main()